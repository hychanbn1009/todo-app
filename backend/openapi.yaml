openapi: 3.0.3
info:
  title: Todo List API
  description: A RESTful API for managing a to-do list, built with Express, TypeScript, and Supabase.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local development server
  - url: https://your-production-url/api
    description: Production server (replace with actual URL)
paths:
  /todos:
    get:
      summary: Get all todos
      description: Retrieves a list of all todos, ordered by ID.
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new todo
      description: Creates a new todo with the provided task.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - task
              properties:
                task:
                  type: string
                  example: Buy groceries
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todos/{id}:
    get:
      summary: Get a todo by ID
      description: Retrieves a specific todo by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the todo
      responses:
        '200':
          description: Todo found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a todo
      description: Updates the task or completed status of a todo by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: string
                  example: Buy groceries and milk
                completed:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '400':
          description: Invalid ID or request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a todo
      description: Deletes a todo by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The ID of the todo
      responses:
        '204':
          description: Todo deleted successfully
        '400':
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Todo:
      type: object
      required:
        - id
        - task
        - completed
      properties:
        id:
          type: integer
          example: 1
        task:
          type: string
          example: Buy groceries
        completed:
          type: boolean
          example: false
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          example: An error message